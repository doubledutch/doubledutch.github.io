{"version":3,"sources":["webpack:///./src/templates/post.js","webpack:///./src/components/SEO/SchemaOrg.js","webpack:///./src/components/SEO/index.js"],"names":["Post","_ref2","_ref2$data","data","site","mdx","_ref2$pageContext","pageContext","next","prev","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_Layout__WEBPACK_IMPORTED_MODULE_8__","frontmatter","components_SEO__WEBPACK_IMPORTED_MODULE_4__","isBlogPost","css","_ref","components_Container__WEBPACK_IMPORTED_MODULE_5__","maxWidth","bpMaxMD","bpMaxSM","title","fonts","regular","date","banner","gatsby_image__WEBPACK_IMPORTED_MODULE_2___default","a","sizes","childImageSharp","alt","siteMetadata","keywords","join","gatsby_mdx_mdx_renderer__WEBPACK_IMPORTED_MODULE_3___default","code","body","_components_SubscribeForm__WEBPACK_IMPORTED_MODULE_7__","pageQuery","React","memo","author","canonicalUrl","datePublished","defaultTitle","description","image","organization","url","baseSchema","@context","@type","name","alternateName","schema","concat","itemListElement","position","item","@id","headline","publisher","logo","mainEntityOfPage","core_browser_esm","Helmet_default","type","JSON","stringify","SEO","postData","_ref$frontmatter","postImage","gatsby_browser_entry","query","render","seo","postMeta","childMarkdownRemark","slug","path","sep","react_default","Fragment","content","property","social","fbAppID","twitter","SchemaOrg","_3550155404","propTypes","PropTypes","bool","shape","any","excerpt","string","defaultProps"],"mappings":"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","file":"component---src-templates-post-js-4fb546afb496aa11ccad.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\nimport MDXRenderer from 'gatsby-mdx/mdx-renderer'\nimport SEO from 'components/SEO'\nimport { css } from '@emotion/core'\nimport Container from 'components/Container'\nimport { bpMaxMD } from '../lib/breakpoints'\nimport SubscribeForm from '../components/SubscribeForm'\nimport Layout from '../components/Layout'\nimport { fonts } from '../lib/typography'\nimport { bpMaxSM } from '../lib/breakpoints'\n\nexport default function Post({\n  data: { site, mdx },\n  pageContext: { next, prev },\n}) {\n  return (\n    <Layout site={site} frontmatter={mdx.frontmatter}>\n      <SEO frontmatter={mdx.frontmatter} isBlogPost />\n      <div\n        css={css`\n          display: flex;\n          z-index: 1;\n          align-items: center;\n          justify-content: center;\n          top: 0;\n          position: absolute;\n          height: 130px;\n          width: 100%;\n          background-size: 550px;\n          background-position: top center;\n        `}\n      />\n      <Container\n        maxWidth={640}\n        css={css`\n          z-index: 999;\n          margin-top: 7vh;\n          margin-bottom: 100px;\n          ${bpMaxMD} {\n            margin-top: 60px;\n          }\n        `}\n      >\n        <h1\n          css={css`\n            text-align: center;\n            font-size: 40px;\n            ${bpMaxSM} {\n              font-size: 30px;\n            }\n          `}\n        >\n          {mdx.frontmatter.title}\n        </h1>\n        <h3\n          css={css`\n            text-align: center;\n            font-size: 15px;\n            opacity: 0.6;\n            font-family: ${fonts.regular}, sans-serif;\n            font-weight: normal;\n          `}\n        >\n          {mdx.frontmatter.date}\n        </h3>\n        {mdx.frontmatter.banner && (\n          <Img\n            sizes={mdx.frontmatter.banner.childImageSharp.sizes}\n            alt={site.siteMetadata.keywords.join(', ')}\n          />\n        )}\n        <br />\n        <MDXRenderer>{mdx.code.body}</MDXRenderer>\n      </Container>\n      <SubscribeForm />\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($id: String!) {\n    site {\n      ...site\n    }\n    mdx(fields: { id: { eq: $id } }) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        banner {\n          childImageSharp {\n            sizes(maxWidth: 900) {\n              ...GatsbyImageSharpSizes\n            }\n          }\n        }\n        slug\n        keywords\n      }\n      code {\n        body\n      }\n    }\n  }\n`\n","import React from 'react'\nimport Helmet from 'react-helmet'\n\nexport default React.memo(\n  ({\n    author,\n    canonicalUrl,\n    datePublished,\n    defaultTitle,\n    description,\n    image,\n    isBlogPost,\n    organization,\n    title,\n    url,\n  }) => {\n    const baseSchema = [\n      {\n        '@context': 'http://schema.org',\n        '@type': 'WebSite',\n        url,\n        name: title,\n        alternateName: defaultTitle,\n      },\n    ]\n\n    const schema = isBlogPost\n      ? [\n          ...baseSchema,\n          {\n            '@context': 'http://schema.org',\n            '@type': 'BreadcrumbList',\n            itemListElement: [\n              {\n                '@type': 'ListItem',\n                position: 1,\n                item: {\n                  '@id': url,\n                  name: title,\n                  image,\n                },\n              },\n            ],\n          },\n          {\n            '@context': 'http://schema.org',\n            '@type': 'BlogPosting',\n            url,\n            name: title,\n            alternateName: defaultTitle,\n            headline: title,\n            image: {\n              '@type': 'ImageObject',\n              url: image,\n            },\n            description,\n            author: {\n              '@type': 'Person',\n              name: author.name,\n            },\n            publisher: {\n              '@type': 'Organization',\n              url: organization.url,\n              logo: organization.logo,\n              name: organization.name,\n            },\n            mainEntityOfPage: {\n              '@type': 'WebSite',\n              '@id': canonicalUrl,\n            },\n            datePublished,\n          },\n        ]\n      : baseSchema\n\n    return (\n      <Helmet>\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">{JSON.stringify(schema)}</script>\n      </Helmet>\n    )\n  },\n)\n","import path from 'path'\nimport React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport SchemaOrg from './SchemaOrg'\n\nconst SEO = ({ postData, frontmatter = {}, postImage, isBlogPost }) => (\n  <StaticQuery\n    query={graphql`\n      {\n        site {\n          siteMetadata {\n            title\n            description\n            canonicalUrl\n            image\n            author {\n              name\n            }\n            organization {\n              name\n              url\n              logo\n            }\n            social {\n              twitter\n              fbAppID\n            }\n          }\n        }\n      }\n    `}\n    render={({ site: { siteMetadata: seo } }) => {\n      const postMeta =\n        frontmatter || postData.childMarkdownRemark.frontmatter || {}\n\n      const title = postMeta.title || seo.title\n      const description = postMeta.description || seo.description\n      const image = postImage ? `${seo.canonicalUrl}${postImage}` : seo.image\n      const url = postMeta.slug\n        ? `${seo.canonicalUrl}${path.sep}${postMeta.slug}`\n        : seo.canonicalUrl\n      const datePublished = isBlogPost ? postMeta.datePublished : false\n\n      return (\n        <React.Fragment>\n          <Helmet>\n            {/* General tags */}\n            <title>{title}</title>\n            <meta name=\"description\" content={description} />\n            <meta name=\"image\" content={image} />\n\n            {/* OpenGraph tags */}\n            <meta property=\"og:url\" content={url} />\n            {isBlogPost ? <meta property=\"og:type\" content=\"article\" /> : null}\n            <meta property=\"og:title\" content={title} />\n            <meta property=\"og:description\" content={description} />\n            <meta property=\"og:image\" content={image} />\n            <meta property=\"fb:app_id\" content={seo.social.fbAppID} />\n\n            {/* Twitter Card tags */}\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:creator\" content={seo.social.twitter} />\n            <meta name=\"twitter:title\" content={title} />\n            <meta name=\"twitter:description\" content={description} />\n            <meta name=\"twitter:image\" content={image} />\n          </Helmet>\n          <SchemaOrg\n            isBlogPost={isBlogPost}\n            url={url}\n            title={title}\n            image={image}\n            description={description}\n            datePublished={datePublished}\n            canonicalUrl={seo.canonicalUrl}\n            author={seo.author}\n            organization={seo.organization}\n            defaultTitle={seo.title}\n          />\n        </React.Fragment>\n      )\n    }}\n  />\n)\n\nSEO.propTypes = {\n  isBlogPost: PropTypes.bool,\n  postData: PropTypes.shape({\n    childMarkdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.any,\n      excerpt: PropTypes.any,\n    }),\n  }),\n  postImage: PropTypes.string,\n}\n\nSEO.defaultProps = {\n  isBlogPost: false,\n  postData: { childMarkdownRemark: {} },\n  postImage: null,\n}\n\nexport default SEO\n"],"sourceRoot":""}