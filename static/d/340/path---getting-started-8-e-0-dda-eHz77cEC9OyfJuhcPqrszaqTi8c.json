{"data":{"site":{"siteMetadata":{"title":"DoubleDutch Developer Platform","description":"Information for building on the DoubleDutch platform","author":{"name":"DoubleDutch"},"keywords":["DoubleDutch","Developer Platform"]}},"mdx":{"frontmatter":{"title":"Getting Started with DDDP","date":"January 02, 2019","author":"Adam Liechty","banner":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='400' height='254' viewBox='0 0 400 254' version='1'%3e%3cpath d='M0 1v127l1 126h257v-55c0-62-1-61 8-66l4-2 40-1c42 0 45 0 50 4 6 5 6 4 6 65v55h16l18-1 1-127V0H201L0 1m0 126' fill='lightgray' fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.5757575757575757,"src":"/static/0d6d7cc30894b14d9836e31d97eb7a31/589d4/banner.png","srcSet":"/static/0d6d7cc30894b14d9836e31d97eb7a31/6d8d0/banner.png 225w,\n/static/0d6d7cc30894b14d9836e31d97eb7a31/e3de9/banner.png 450w,\n/static/0d6d7cc30894b14d9836e31d97eb7a31/589d4/banner.png 900w,\n/static/0d6d7cc30894b14d9836e31d97eb7a31/ee4f6/banner.png 988w","srcWebp":"/static/0d6d7cc30894b14d9836e31d97eb7a31/6d1c7/banner.webp","srcSetWebp":"/static/0d6d7cc30894b14d9836e31d97eb7a31/a2f97/banner.webp 225w,\n/static/0d6d7cc30894b14d9836e31d97eb7a31/990f6/banner.webp 450w,\n/static/0d6d7cc30894b14d9836e31d97eb7a31/6d1c7/banner.webp 900w,\n/static/0d6d7cc30894b14d9836e31d97eb7a31/c2a71/banner.webp 988w","sizes":"(max-width: 900px) 100vw, 900px"}}},"slug":"getting-started","keywords":null},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `See this `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"./faq\"\n      }\n    }, `FAQ for non-engineers`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The DoubleDutch Developer Platform supports developing standalone extensions that can be hosted\nwithin a DoubleDutch mobile app. Extensions are written in Javascript using the React Native\nframework.`), React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Developer videos`), React.createElement(Table, {\n      columns: 2\n    }, React.createElement(\"div\", null, React.createElement(YouTube, {\n      title: \"Getting started\",\n      videoId: \"tz0Fx0YQvS0\"\n    }), \"Getting Started\"), React.createElement(\"div\", null, React.createElement(YouTube, {\n      title: \"Using the rn-client library\",\n      videoId: \"LrdQl9G8jYo\"\n    }), \"Using the rn-client library\")), React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Examples`), React.createElement(Table, {\n      columns: 3\n    }, React.createElement(Link, {\n      to: \"https://github.com/doubledutch/digital-business-cards\"\n    }, React.createElement(\"img\", {\n      src: digitalBusinessCards\n    }), \"Digital Business Cards\"), React.createElement(Link, {\n      to: \"https://github.com/doubledutch/question-and-answer\"\n    }, React.createElement(\"img\", {\n      src: questionAnswer\n    }), \"Question & Answer\"), React.createElement(Link, {\n      to: \"https://github.com/doubledutch/ice-breaker-espionage\"\n    }, React.createElement(\"img\", {\n      src: iceBreakerEspionage\n    }), \"Ice Breaker Espionage\")), React.createElement(MDXTag, {\n      name: \"h1\",\n      components: components\n    }, `Developer Environment`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The developer environment is currently limited to run on a Mac.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You do not need to have a DoubleDutch developer account in order to start developing a new extension.\nDoubleDutch extensions can be written and tested locally in the iOS or Android simulator without any\nprior contact with DoubleDutch Engineering.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Prerequisites`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://nodejs.org\"\n      }\n    }, `NodeJS`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://yarnpkg.com/en/docs/install\"\n      }\n    }, `Yarn`), ` (`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `brew install yarn`), `)`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"http://brewformulas.org/Watchman\"\n      }\n    }, `Watchman`), ` (`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `brew install watchman`), `)`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://developer.apple.com/xcode/\"\n      }\n    }, `XCode`), ` (to run in iOS simulator). If you have not used XCode before, be sure to open it once to\naccept the EULA and allow it to install the command line developer tools, or simply run `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `sudo xcodebuild -license accept`), `\nfrom the command line.`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Getting Started`), React.createElement(MDXTag, {\n      name: \"ol\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Install the `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `doubledutch`), ` `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://www.npmjs.com/package/@doubledutch/cli\"\n      }\n    }, `command line tools`))), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `npm i -g @doubledutch/cli\n`)), React.createElement(MDXTag, {\n      name: \"ol\",\n      components: components,\n      props: {\n        \"start\": 2\n      }\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Create an empty folder for your project and initialize it.`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `cd ~/code/project\ndoubledutch init\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This will populate that folder with a functioning React Native project setup to run as an extension\nwithin the DoubleDutch mobile app. By default the name of the extension will match the current folder\nname. In the example above, you can find the Javascript files for your project in\n`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `~/code/project/mobile/src/`), `. The file `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `home-view.js`), ` is the root of your extension and has been\ninitialized with a simple \"To do\" style sample extension. This sample extension provides examples of\nusing useful DoubleDutch libraries such as `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.npmjs.com/package/@doubledutch/rn-client\"\n      }\n    }, `@doubledutch/rn-client`), ` (used by all DoubleDutch extensions\nbuilt with React Native) and `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.npmjs.com/package/@doubledutch/firebase-connector\"\n      }\n    }, `@doubledutch/firebase-connector`), ` (optional integration with Google Cloud\nPlatform's Firebase Realtime Database for easy backend development).`), React.createElement(MDXTag, {\n      name: \"ol\",\n      components: components,\n      props: {\n        \"start\": 3\n      }\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Run the sample code in the simulator`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {}\n    }, `cd ~/code/project/mobile\nnpm run ios\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The Javascript packager will take a couple minutes to initialize the first time. After that, `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `⌘ R`), ` in the\nsimulator will quickly reload your changes.`), React.createElement(MDXTag, {\n      name: \"ol\",\n      components: components,\n      props: {\n        \"start\": 4\n      }\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Make edits to the code in your favorite editor. `, React.createElement(VSCode, null), React.createElement(Atom, null), React.createElement(Sublime, null)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Hit `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `⌘ R`), ` in the simulator to refresh.  `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"li\"\n    }, `⌘ D`), ` for debugging with Chrome developer tools.`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Interacting with the DoubleDutch mobile app`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The sample extension that is created for you when you run `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `doubledutch init`), ` uses the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.npmjs.com/package/@doubledutch/rn-client\"\n      }\n    }, `@doubledutch/rn-client`), `\nlibrary, which serves as a bridge between your extension and the mobile app it is hosted within.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `import client, { Avatar, TitleBar } from '@doubledutch/rn-client'\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This bridge allows you to access key information about the current event in the mobile app as well as the\nattendee that is logged in:`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `client.getCurrentUser(currentUser => console.log(currentUser))\nclient.getCurrentEvent(currentEvent => console.log(currentEvent))\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In the simulator, mock data is provided for local development.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Need a backend for your extension?`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.npmjs.com/package/@doubledutch/firebase-connector\"\n      }\n    }, `@doubledutch/firebase-connector`), ` provides optional integration with Google Cloud Platform's Firebase suite\nfor easy backend development. The default configuration provides access to realtime database references\nin an environment managed by DoubleDutch. Each event's data is sandboxed, and `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.npmjs.com/package/@doubledutch/firebase-connector\"\n      }\n    }, `@doubledutch/firebase-connector`), `\nprovides database references that have various combinations of access control for attendees and event managers.\nSee `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://www.npmjs.com/package/@doubledutch/firebase-connector\"\n      }\n    }, `@doubledutch/firebase-connector`), ` for more details.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Publishing and Installing your DoubleDutch extension`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `See `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"../publishing-installing\"\n      }\n    }, `Publishing and Installing Extensions`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Reference`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `See documentation for various DoubleDutch platform components:`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://www.npmjs.com/package/@doubledutch/rn-client\"\n      }\n    }, `@doubledutch/rn-client`), `.  DoubleDutch React Native client`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://www.npmjs.com/package/@doubledutch/firebase-connector\"\n      }\n    }, `@doubledutch/firebase-connector`), `.  Easy realtime backend for your extension`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://www.npmjs.com/package/@doubledutch/cli\"\n      }\n    }, `@doubledutch/cli`), `.  DoubleDutch developer command line interface`)));\n  }\n\n}"}}},"pageContext":{"id":"ba58b2de-0fa8-52d4-b228-41e550202758","prev":null,"next":{"id":"395f76e0-4dc5-52eb-85c8-0bebc18c11f6","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"What is the DoubleDutch Developer Platform (DDDP)? DDDP allows DoubleDutch customers and 3rd party developers to build extensions that can be installed\nto any DoubleDutch event app. What is an extension? An extension is a self-contained experience…","fields":{"title":"Frequently Asked Questions","slug":"faq","date":"2019-01-01T00:00:00.000Z","redirects":null},"code":{"scope":""}}}}